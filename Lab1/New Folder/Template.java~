/**
 *  This is a Java template for CS3230 - Programming Assignment 1 - Part 1
 *  (January-2015)
 *
 *  You are not required to follow the template. Feel free to modify any part.
 *
 *  Comment your code!
 * reference:https://github.com/joemaag/karatsuba_algorithm/blob/master/Multiplication.java
 * 
 */


import java.io.*;
import java.util.*;
import java.util.ArrayList;

class Template { // in Mooshak online judge, make sure that Java file name = class name that contains Main method
 public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out))); // use this (a much faster pr routine) instead of Java System.out.println (slow)

  int T, B;
  String V, M; 
  T = sc.nextInt();

   /* char[] Vc=new char[V.length()];
   char[] Mc=new char[M.length()];
   for(int i1=0;i1<V.length();i1++){
    Vc[i1]=V.charAt(i1);    
   }
   for(int i2=0;i2<M.length();i2++){
    Mc[i2]=V.charAt(i2);    
   }
   
   */
  
  
  for (int i = 1; i <= T; ++i) {
   B = sc.nextInt();
   sc.nextLine();
   V = sc.nextLine(); 
   M = sc.nextLine();

   // Insert solution here.
   int decimal=0;


   if(V.contains(".")){
    decimal+=(V.substring(V.indexOf(".")+1,V.length())).length();
  //  V=removePoint(V);
 V=V.substring(0,V.indexOf("."))+V.substring(V.indexOf(".")+1,V.length());
  
   }
//if(trimZeros(M).indexOf(".")==-1){
  if(M.contains(".")){
    decimal+=(M.substring(M.indexOf(".")+1,M.length())).length();
   // M=removePoint(M);
    M=M.substring(0,M.indexOf("."))+M.substring(M.indexOf(".")+1,M.length());
   }

   LongInteger x=new LongInteger(V,B);
   LongInteger y=new LongInteger(M,B);

   LongInteger z=x.karatsubamultiply(y);

   String pr=z.toString();
//System.out.println(pr+" dec= "+decimal);
//**************addin the decimal point*********//
   if(decimal!=0){
     if(pr.length()>decimal){
    pr=pr.substring(0,pr.length()-decimal)+"."+pr.substring(pr.length()-decimal,pr.length());
   }
   
   else{
     String Zeros="";
       for(int d=0;d<decimal-pr.length();d++){
         Zeros+="0";
       }
     pr=trimZeros("0."+ Zeros+pr);
   }
   }
   pw.write(trimZeros(pr));
   pw.write("\n");
  }
  sc.close();
  pw.close(); // do not forget to use this
 }

   private static String removePoint(String input){
      String pr=input;
      if((input.indexOf("."))!=-1){
        pr=input.substring(0,input.indexOf("."))+input.substring(input.indexOf(".")+1,input.length());
      }
      
      return pr;
    }
   
 /**
  * Use to trim leading and trailing zeros on a result string.
  */
 private static String trimZeros(String input) {
  int left = 0;
  int right = input.length()-1;
  int fp = input.indexOf('.');
  if (fp == -1) {
   fp = input.length();
  }

  while(left < fp-1) {
   if (input.charAt(left) != '0')
    break;
   left++;
  }

  while (right >= fp) {
   if (input.charAt(right) != '0') {
    if (input.charAt(right) == '.')
     right--;
    break;
   }
   right--;
  }

  if (left >= fp)
   return "0" + input.substring(left,right+1);
  return input.substring(left,right+1);
 }

}

class LongInteger implements Comparable<LongInteger>{

 private ArrayList<Integer> bigNum;
 private int base;



 public LongInteger(ArrayList<Integer> a, int b){
  bigNum = new ArrayList<Integer>(a);
  base=b;
 }

 public LongInteger(String str,int b){
  

   if(str.equals("")){
   str=new String("0");
  } 
  bigNum = new ArrayList<Integer>(str.length());
  
//  for(int i=0;i<str.length();i++){
  for (int i = str.length()-1; i>=0;i--){
   bigNum.add(parseDigit(str.charAt(i)));
  }
this.base=b;
 }
 

 
 
 
 
  private int get(int i){
if(i>=this.Length()){
   return 0;
  }
   return this.bigNum.get(i);
 
 }

 private int Length(){
  return this.bigNum.size();
 }



 
 public LongInteger add(LongInteger h){
  ArrayList<Integer> ret = new ArrayList<Integer>(); 

   int length1=this.Length();
    int length2=h.Length();

    int length=Math.max(length1,length2);
  
  int temp1 = 0;
  int result = 0;

  for (int i=0;i<length;i++){
   result = this.get(i) + h.get(i) + temp1;
   
   if ((result>= base) && (i!= length-1)){
    ret.add(result-base);
    
    temp1 = 1;
   }else if ((i == length-1) && (result >= base)){
    ret.add(result-base);
    
    ret.add(1);
   }else{
    ret.add(result);
    temp1 = 0;
   }

   result = 0;
  } 
  return new LongInteger(ret,base);
 }
 
 
 public LongInteger minus(LongInteger h){
   int length1=this.Length();
    int length2=h.Length();
    
    int length=Math.max(length1,length2);
  ArrayList<Integer> ans = new ArrayList<Integer>();
  int temp1 = 0;
  int result = 0;
 // System.out.println("temp1= "+temp1+"result= "+result);
  for (int i=0;i<this.Length();i++){
   if (temp1 == 1){
    result = this.get(i)- 1;
   }
   else{
    result = this.get(i);
   }
   if (result<h.get(i)){
    result=(result+base)-h.get(i);
    temp1 = 1;
   }
   else{
    result -= h.get(i);
    temp1 = 0;
   }
   ans.add(result);
   result = 0;
  }
  return new LongInteger(ans,base);
 }  
 

    public LongInteger multiply(LongInteger h){
  ArrayList<Integer> ret = new ArrayList<Integer>();
  
  int result;
  //LongInteger tempNumber = new LongInteger("",base);
 // LongInteger fin= new LongInteger("",base);
   LongInteger tempNumber = new LongInteger("0",base);
  LongInteger fin= new LongInteger("0",base);
  int temp1 = 0;
  
  for (int i=0;i<h.Length();i++){
   temp1 = 0;

   for (int j=0;j!=i;j++){
    ret.add(0);
   }

   for (int j=0;j<this.Length();j++){  
    result = (h.get(i) * this.get(j))+temp1;  
    
    temp1=result/base;
  //  result %= result-base;
    result=result%base;
   // System.out.println("%%%%%%%%"temp1);
    //System.out.println("result= "+result);
    ret.add(result);
    result = 0;

    if (j == this.Length() -1){
     ret.add(temp1);
     tempNumber = new LongInteger(ret,base);
     ret.clear();
    }


   }

   fin = fin.add(tempNumber);
  }
  return fin;


 }
 
 public void init(int n){
   for(int i=0;i<n;i++){
  bigNum.add(0); 
   }
 }
 
  
 
 
 
 
 

 public LongInteger karatsubamultiply(LongInteger h){


  if (this.Length() < 10 || h.Length() < 10){
   return this.multiply(h);    
  }

   int size1 = this.Length();
             int size2 = h.Length();//getSize(y);

           

             int N = Math.max(size1, size2);

   N=(N/2)+(N%2);

   
     if(this.Length()-h.Length()>5){
    h.init(this.Length()-h.Length());
  }
       if(h.Length()-this.Length()>5){
    this.init(this.Length()-h.Length());
       }
       
       


  ArrayList<Integer> arrayList1=new ArrayList<Integer>();
  
  ArrayList<Integer> arrayList2=new ArrayList<Integer>();
      /*
          long b = x / m;

             long a = x - (b * m);
             long d = y / m;
             long c = y - (d * N);

        
             long z0 = multiply(a, c);
             long z1 = multiply(a + b, c + d);
             long z2 = multiply(b, d);
             return z0 + ((z1 - z0 - z2) * m) + (z2 * (long)(Math.pow(10, 2 * N)));
         */
    
    
    LongInteger  a1 = new LongInteger(this.toString().substring(0,this.Length() - N),base);
    
  LongInteger  a0 = new LongInteger(this.toString().substring(this.Length() - N, this.Length()),base);
  LongInteger  b1 = new LongInteger(h.toString().substring(0,h.Length() - N),base);
  LongInteger  b0 = new LongInteger(h.toString().substring(h.Length() - N, h.Length()),base);


  LongInteger ac = a1.karatsubamultiply(b1);
  LongInteger bd  = a0.karatsubamultiply(b0);
  LongInteger ab_cd = (a1.add(a0)).karatsubamultiply((b1.add(b0)));

  LongInteger intermediateNum = ab_cd.minus(ac).minus(bd);



  for (int i = 0; i<2*N;i++){
   arrayList1.add(0);
  }
  for (int i = 0; i<N;i++){
   arrayList2.add(0);
  }

  arrayList1.addAll(ac.bigNum);
  arrayList2.addAll(intermediateNum.bigNum);
LongInteger first=new LongInteger(arrayList1,base); 
  LongInteger second=new LongInteger(arrayList2,base); 

  return first.add(second).add(bd);  

 }
 


 public String toString(){
   StringBuilder builder = new StringBuilder();
  for (int i = this.Length()-1;i>=0;i--){
   builder.append(toDigit(this.get(i)));
  }
  return builder.toString();
 }
 public int compareTo(LongInteger h){
  if (this.Length() > h.Length()){ 
   
   return 1;  
  }else if (this.Length() < h.Length()){
   
   return -1;
  }else{
   for (int i=this.Length() - 1;i>=0; i--){
    
    if (this.get(i) > h.get(i)){
     return 1;
    }
    if (this.get(i) < h.get(i)){
     return -1;
    }
   }
   return 0;
  }
 }



 /**
  * Convert digit to int (for reading)
  */
 private static int parseDigit(char c) {
  if (c <= '9') {
   return c - '0';
  } 
  return c - 'A' + 10;
 }

 /**
  * Convert int to digit. (for printing)
  */
 private static char toDigit(int digit) {
  if (digit <= 9) {
   return (char)(digit + '0');
  } 
  return (char)(digit - 10 + 'A');
 }

}



